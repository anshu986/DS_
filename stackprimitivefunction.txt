//Program for Stack Primitive Operations

#include <stdio.h>
typedef struct stack
{
    int a[10];
    int top;
} stack_type;

int overflow(stack_type *v)
{
    if(v->top==9)
    return 0;
    else
    return 1;
    
}

int underflow(stack_type *v)
{
    if(v->top==-1)
    return 0;
    else
    return 1;
    
}
void push(stack_type *v)
{
    int ele;
    scanf("%d",&ele);
    (v->top)++;
    v->a[v->top]=ele;
}

int pop(stack_type *v)
{

    int temp =v->a[v->top];
    v->top--;
    return temp;
}

void display(stack_type *v)
{
   int i;
   for (i=(v->top+1);i>=0;i--)
   {
       printf("%d",v->a[i]);
   }
}

void init(stack_type *v)
{
    v->top=-1;
}

int main(void) {
stack_type s;
int o,ov,r,choice,wish;
init(&s);
do{
    scanf("%d",&choice);
    switch(choice){
    case 1:
    ov=overflow(&s);
    if(ov==0){
        printf("Push not possible");
    }
    else{
        push(&s);
        display(&s);
    }
     break;

    case 2:
    ov=underflow(&s);
    if(ov==0){
        printf("pop not possible");
        }
    else{
        r=pop(&s);
        printf("%d",r);
    }
    break;

    
    case 3:
    display(&s);
     break;

    
    case 4:
    ov=underflow(&s);
    if(ov==0){
        printf("pop not possible");
    }
    else{
       printf("pop operation is possible");
    }
     break;

    
    case 5:
    ov=overflow(&s);
    if(ov==0){
        printf("push not possible");
    }
    else{
        printf("push operation is  possible");

    }
     break;

    }
    printf("\nDo You Want To Continue?");
scanf("%d",&wish);
}while(wish==1);
return 0;
}

